import { describe, it, expect } from 'vitest';
import path from 'node:path';
import { resolveOutputType } from '../src/support/utils.civet';
import { defaultOpts } from '../src/support/config.civet';

describe('resolveOutputType', () => {
  cwd := '/app';

  it('should return tsx for files under outTsx directories', () => {
    ctx := {
      cwd,
      opts: { ...defaultOpts, outTsx: ['src/components'], outTs: ['src/lib'] },
    };
    file := path.join(cwd, 'src/components/Button.civet');
    expect(resolveOutputType(ctx, file)).toBe(true);
  });

  it('should return ts for files under outTs directories', () => {
    ctx := {
      cwd,
      opts: { ...defaultOpts, outTsx: ['src/components'], outTs: ['src/lib'] },
    };
    file := path.join(cwd, 'src/lib/utils.civet');
    expect(resolveOutputType(ctx, file)).toBe(false);
  });

  it('should prefer the longer path if both match', () => {
    ctx := {
      cwd,
      opts: { ...defaultOpts, outTsx: ['src/components'], outTs: ['src'] },
    };
    file := path.join(cwd, 'src/components/Card.civet');
    expect(resolveOutputType(ctx, file)).toBe(true);
  });

  it('should fall back to the global tsx option', () => {
    ctx := {
      cwd,
      opts: { ...defaultOpts, tsx: true },
    };
    file := path.join(cwd, 'src/other/test.civet');
    expect(resolveOutputType(ctx, file)).toBe(true);
  });

  it('should handle root-level configuration', () => {
    ctx := {
        cwd,
        opts: { ...defaultOpts, outTsx: ['.'] }
    };
    file := path.join(cwd, 'App.civet');
    expect(resolveOutputType(ctx, file)).toBe(true);
  });
}); 