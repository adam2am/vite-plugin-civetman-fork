// --------------------------------------------------------------
// compileWorker.civet â€“ runs inside a worker thread (pure CPU compile step)
// --------------------------------------------------------------
import { parentPort } from "node:worker_threads"
import { compile } from "@danielx/civet"
import fs from "node:fs/promises"

// This script must be run as a worker.
unless parentPort
    throw new Error("Must be run as a worker thread.")

// Listen for a message from the main thread.
parentPort!.on "message", async (msg) =>
    { file, content: initial, isTsx, wantMap, parseOpts } := msg
    try
        // Use provided content when available to avoid an extra disk read.
        content := if initial? then initial else await fs.readFile(file, "utf8")
        // Perform the compilation.
        compileOptions := { filename: file, sourceMap: wantMap, ...(parseOpts ? { parseOptions: parseOpts } : {}) }
        { code, sourceMap } := await compile(content, compileOptions)
        
        // The outFile path is needed to correctly generate the source map.
        outFile := file.replace('.civet', isTsx ? '.tsx' : '.ts')
        mapJson := if wantMap then sourceMap.json(file, outFile) else null
        plainMap := mapJson

        // Send the successful result back to the main thread.
        parentPort!.postMessage({ ok: true, code, mapJson: plainMap })
    catch error
        // If compilation fails, send an error message back.
        parentPort!.postMessage({ ok: false, error: String(error) }) 