// --------------------------------------------------------------
// workerPool.civet – Minimal worker-thread pool for CPU tasks (pool, acquire / release, exec)
// --------------------------------------------------------------
import { Worker } from "node:worker_threads"
import os from "node:os"
import fs from "fs-extra"
import { fileURLToPath } from "node:url"
import type { CompileWorkerPayload, CompileWorkerResult } from "./types.civet"

const logDebug = (...args: unknown[]) => {
    // Placeholder if not imported to avoid breaking helpers if used standalone.
    // In your app, logDebug from main.civet is available.
    console.log('[DEBUG]', ...args)
}

// Resolve worker script path in an ESM-safe way
const workerScriptPath = fileURLToPath(new URL('./workers/compileWorker.cjs', import.meta.url))

// A very small pool implementation – good enough for our compile workers.
export class WorkerPool
    size: number
    idle: Worker[]
    pending: { resolve: (w: Worker) => void, reject: (err: Error) => void }[]
    totalWorkers: number
    poolAvailable: boolean

    constructor(size = Math.max(1, os.cpus()?.length || 2))
        @size = size
        @idle = []
        @pending = []
        @totalWorkers = 0
        // Do a synchronous existence check to guarantee immediate result
        @poolAvailable = fs.pathExistsSync(workerScriptPath)
    
    // async check no longer needed – kept for backwards compatibility (noop)
    async checkWorkerScript()
        return @poolAvailable

    // Acquire a worker (waiting if none free)
    acquire(): Promise<Worker>
        return new Promise (resolve, reject) => 
            if (@idle.length > 0)
                const worker = @idle.pop()
                if (worker) {
                    resolve(worker)
                } else {
                    reject(new Error("Worker pool state corrupted: idle array was empty despite length check"))
                }
            else if (@totalWorkers < @size)
                worker := new Worker(workerScriptPath)
                @totalWorkers++
                // Auto-remove workers that exit unexpectedly to keep the pool healthy.
                worker.on "exit", (code) =>
                    // Always decrement the count when a worker ends
                    @totalWorkers = Math.max(0, @totalWorkers - 1)
                    // Ensure it is not kept in idle list
                    @idle = @idle.filter((w) => w !== worker)
                    // If a worker exits with an error, fail a pending request.
                    if code != 0 and @pending.length > 0
                        const pendingRequest = @pending.shift()
                        if (pendingRequest) {
                            pendingRequest.reject(new Error(`Worker exited with error code: ${code}`))
                        }
                resolve(worker)
            else
                @pending.push({ resolve, reject })

    release(worker: Worker)
        if (@pending.length > 0)
            const pendingRequest = @pending.shift()
            if (pendingRequest) {
                // Give the worker to the first pending resolver
                pendingRequest.resolve(worker)
            }
        else
            @idle.push(worker)

    // Run a task: compile given data in worker, returns promise
    async exec(payload: CompileWorkerPayload): Promise<CompileWorkerResult>
        worker := await @acquire()
        try
            return await new Promise<CompileWorkerResult> (resolve, reject) => 
                messageHandler := (msg: CompileWorkerResult) =>
                    cleanup()
                    if msg.ok
                        resolve(msg)
                    else
                        reject(new Error(msg.error))

                errorHandler := (err: Error) =>
                    cleanup()
                    reject(err)

                exitHandler := (code: number) =>
                    cleanup()
                    if code == 0
                        reject(new Error("Worker exited before response"))
                    else
                        reject(new Error("Worker exited with code " + code))

                cleanup := =>
                    worker.off("message", messageHandler)
                    worker.off("error", errorHandler)
                    worker.off("exit", exitHandler)

                worker.on("message", messageHandler)
                worker.on("error", errorHandler)
                worker.on("exit", exitHandler)
                worker.postMessage(payload)
            
        finally
            @release(worker)    
    
    async shutdown()
        for worker of @idle
            try
                await worker.terminate()
            catch (err: unknown)
                logDebug("[POOL] Failed to terminate worker during shutdown.", { threadId: worker.threadId, err })
        @idle = []
        for p of @pending
            p.reject(new Error("Pool is shutting down"))
        @pending = []

export default WorkerPool 