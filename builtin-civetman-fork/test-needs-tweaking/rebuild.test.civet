import { describe, it, beforeAll, afterAll, expect } from 'vitest'
import fs from 'fs-extra'
import path from 'node:path'
import { spawn } from 'node:child_process'
import { fileURLToPath } from 'node:url'

stripAnsi := (str: string) => str.replace(/\u001b\[[0-9;]*m/g, '')

// __dirname polyfill for ESM test files
__filename := fileURLToPath(import.meta.url)
__dirname  := path.dirname(__filename)

// --- Test Setup ---
tempDir := path.resolve(__dirname, 'temp-invalidation-test')
cliPath := path.resolve(__dirname, '..', '..', 'dist', 'cli', 'index.js')

runBuild := (cwd: string): Promise<string> ->
    new Promise (resolve, reject) ->
        child := spawn('node', [cliPath, 'build'], { cwd, shell: process.platform === 'win32' })
        output .= ''
        
        child.stdout?.on('data', (data) => output += data.toString())
        child.stderr?.on('data', (data) => output += data.toString())

        child.on 'error', reject
        child.on 'close', (code) ->
            if code == 0
                resolve(stripAnsi(output))
            else
                console.error(stripAnsi(output)) // Log output on failure
                reject(new Error(`Build failed with code ${code}`))

describe 'Cache Invalidation on Config Change', ->
    beforeAll async ->
        await fs.remove(tempDir)  // start clean
        await fs.ensureDir(tempDir)
        // initial project state
        await fs.writeFile(path.join(tempDir, 'a.civet'), 'export x := 1')
        await fs.writeJson(path.join(tempDir, 'civetconfig.json'),
            parseOptions:
                js: false
        )

    afterAll async ->
        await fs.remove(tempDir)

    it 'performs an initial build', async ->
        output1 := await runBuild(tempDir)
        expect(output1.includes('Built 1')).toBe(true)

        outFile := path.join(tempDir, 'a.ts')
        expect(await fs.pathExists(outFile)).toBe(true)
        content := await fs.readFile(outFile, 'utf8')
        expect(content.includes('// @ts-nocheck')).toBe(false)

    it 'skips compilation on a second run with no changes', async ->
        output2 := await runBuild(tempDir)
        expect(/skip/i.test(output2)).toBe(true)

    it 'rebuilds after civetconfig.json changes', async ->
        configPath := path.join(tempDir, 'civetconfig.json')
        await fs.writeJson(configPath, {
            parseOptions: {
                js: true
            }
        })
        await new Promise((resolve) => setTimeout(resolve, 100)) // fs grace period

        output3 := await runBuild(tempDir)
        expect(output3.includes('Built 1')).toBe(true)

        outFile := path.join(tempDir, 'a.ts')
        content := await fs.readFile(outFile, 'utf8')
        expect(content.includes('// @ts-nocheck')).toBe(true)