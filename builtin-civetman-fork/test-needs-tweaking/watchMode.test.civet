import { describe, it, before, after } from 'mocha'
import { spawn, ChildProcess } from 'node:child_process'
import fs from 'fs-extra'
import path from 'node:path'
import { fileURLToPath } from 'node:url'
import assert from 'node:assert'
import stripAnsi from 'strip-ansi'

// ESM replacements for __filename / __dirname
__filename := fileURLToPath(import.meta.url)
__dirname  := path.dirname(__filename)

// Accumulate watcher output – makes it trivial to check for substrings later.
outputBuffer .= ""
appendOutput := (chunk: unknown) ->
    outputBuffer += stripAnsi(String(chunk))

// Utility: wait until a specific text appears in watcher output (or fail after timeout)
waitFor := (text: string, timeout = 10000) ->
    new Promise (resolve, reject) ->
        if outputBuffer.includes(text)
            return resolve(true)
        start := Date.now()
        check := ->
            if outputBuffer.includes(text)
                return resolve(true)
            if (Date.now() - start) > timeout
                return reject new Error("Timeout waiting for: " + text)
            setTimeout(check, 50)
        check()

describe "Civetman Watch – basic rebuild", () =>
    watcher: ChildProcess | null .= null
    testDir := path.join(__dirname, "temp-watch-test")
    fixtureDir := path.join(__dirname, "fixture")
    civetPath := path.join(testDir, "dummy.civet")
    tsPath    := path.join(testDir, "dummy.ts")

    before async ->
        @timeout 30000 // extra slack for initial build
        // Prepare clean test folder
        await fs.remove(testDir)
        await fs.copy(fixtureDir, testDir)

        // Ensure CLI is built (dist/cli/index.js)
        cli := path.resolve(__dirname, '..', '..', 'dist', 'cli', 'index.js')
        unless await fs.exists(cli)
            throw new Error("Civetman CLI not built – run pnpm run build before tests")

        // Start watcher process
        watcher = spawn('node', [cli, 'dev'], { cwd: testDir })
        watcher.stdout?.on('data', appendOutput)
        watcher.stderr?.on('data', appendOutput)

        // Wait until watcher is ready
        await waitFor("Watching for changes")

    after ->
        watcher?.kill()

    it "should build initially and after a change", async ->
        @timeout 20000
        // 1) Initial build verification
        content1 := await fs.readFile(tsPath, 'utf8')
        assert(content1.includes("const a: number = 1"), "Initial TS output incorrect")

        // 2) Trigger a change
        await fs.writeFile(civetPath, "a: number := 2\nexport {}")
        await waitFor("✓ dummy.civet -> dummy.ts", 15000)

        // 3) Confirm rebuild output
        content2 := await fs.readFile(tsPath, 'utf8')
        assert(content2.includes("const a: number = 2"), "Rebuilt TS output incorrect")